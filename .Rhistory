ggtitle(title) +
theme(plot.title=element_text(size=20))
i <- 1
for(dname in dong_list){
title <- paste0(sort_dong[[i]]$dong[1], " 유동인구 추이")
sort_dong[[i]]$date_ID <- as.factor(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.character(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.Date(sort_dong[[i]]$date_ID, format="%Y%m%d")
ggplot(sort_dong[[i]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
ggsave(paste0("./Graph/",title,".png"))
i=i+1
}
sort_dong[[1]]$final_pop
ggplot(sort_dong[[1]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
sort_dong[[1]]$final_pop
ggplot(sort_dong[[1]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
ggplot(sort_dong[[1]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
sort_dong[[1]]$date_ID
sort_dong[[1]]$date_ID <- as.character(sort_dong[[1]]$date_ID)
sort_dong[[1]]$date_ID <- as.Date(sort_dong[[1]]$date_ID, format="%Y%m%d")
sort_dong[[1]]$date_ID
sort_dong[[1]]$date_ID <- as.character(sort_dong[[1]]$date_ID)
sort_dong[[1]]$date_ID <- as.Date(sort_dong[[1]]$date_ID, format="%Y%m%d")
sort_dong[[1]]$date_ID
title <- paste0(sort_dong[[1]]$dong[1], " 유동인구 추이")
sort_dong[[1]]
sort_dong[[1]]$date_ID <- as.character(sort_dong[[1]]$date_ID)
sort_dong[[1]]$date_ID <- as.Date(sort_dong[[1]]$date_ID, format="%Y%m%d")
sort_dong[[1]]$date_ID
rm(list=ls())
final <- read.csv("final_data.csv")
final$date_ID
final$final_pop <- round(final$final_pop,-2)
date_ls <- final$date_ID
date_ls <- unique(date_ls)
local_ls <- final$dong
local_ls <- unique(local_ls)
sort_date <- list(final %>% filter(date_ID==date_ls[1]))
i <- 1
for (date in date_ls){
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
i=i+1
print(i)
}
dong_list <- c("서교동", "여의동", "종로1.2.3.4가동", "삼성1동", "명동", "잠실6동", "반포4동", "잠실3동", "한강로동", "역삼1동")
str(dong_list)
sort_dong <- list(final %>% filter(dong == dong_list[1] ))
i <- 1
dong_list
for (dname in dong_list){
sort_dong[i] <- list(final %>% filter(dong == dname) %>% arrange(date_ID))
i =i+1
}
i <- 1
for(dname in dong_list){
title <- paste0(sort_dong[[i]]$dong[1], " 유동인구 추이")
sort_dong[[i]]$date_ID <- as.factor(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.character(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.Date(sort_dong[[i]]$date_ID, format="%Y%m%d")
ggplot(sort_dong[[i]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
ggsave(paste0("./Graph/",title,".png"))
i=i+1
}
for(dname in dong_list){
title <- paste0(sort_dong[[i]]$dong[1], " 유동인구 추이")
sort_dong[[i]]$date_ID <- as.factor(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.character(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.Date(sort_dong[[i]]$date_ID, format="%Y%m%d")
ggplot(sort_dong[[i]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
ggsave(paste0("./Graph/",title,".png"))
i=i+1
}
i <- 1
for(dname in dong_list){
title <- paste0(sort_dong[[i]]$dong[1], " 유동인구 추이")
sort_dong[[i]]$date_ID <- as.factor(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.character(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.Date(sort_dong[[i]]$date_ID, format="%Y%m%d")
ggplot(sort_dong[[i]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
ggsave(paste0("./Graph/",title,".png"))
i=i+1
}
library(ggplot2)
rm(list=ls())
final <- read.csv("final_data.csv")
final$date_ID
final$final_pop <- round(final$final_pop,-2)
date_ls <- final$date_ID
date_ls <- unique(date_ls)
local_ls <- final$dong
local_ls <- unique(local_ls)
sort_date <- list(final %>% filter(date_ID==date_ls[1]))
i <- 1
for (date in date_ls){
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
i=i+1
print(i)
}
dong_list <- c("서교동", "여의동", "종로1.2.3.4가동", "삼성1동", "명동", "잠실6동", "반포4동", "잠실3동", "한강로동", "역삼1동")
str(dong_list)
sort_dong <- list(final %>% filter(dong == dong_list[1] ))
i <- 1
dong_list
for (dname in dong_list){
sort_dong[i] <- list(final %>% filter(dong == dname) %>% arrange(date_ID))
i =i+1
}
i <- 1
for(dname in dong_list){
title <- paste0(sort_dong[[i]]$dong[1], " 유동인구 추이")
sort_dong[[i]]$date_ID <- as.factor(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.character(sort_dong[[i]]$date_ID)
sort_dong[[i]]$date_ID <- as.Date(sort_dong[[i]]$date_ID, format="%Y%m%d")
ggplot(sort_dong[[i]], aes(x=date_ID, y=final_pop, group=1)) +
geom_line() +
ggtitle(title) +
theme(plot.title=element_text(size=20))
ggsave(paste0("./Graph/",title,".png"))
i=i+1
}
date_ls[1]
date_ls[1]
date_ls[50]
date_ls[100]
date_ls[150]
date_ls[200]
date_ls[250]
library(ggplot2)
library(geojsonio)
library(broom)
library(dplyr)
library(leaflet)
library(RColorBrewer)
library(ggmap)
rm(list=ls())
# geojson 파일 불러오기
spdf <- geojson_read("dong.geojson",  what = "sp")
# 서울만 추려내기
spdf@data$seoul = substr( spdf@data$adm_nm, 1, 2)
seoul = spdf[ spdf@data$seoul == "서울" , ]
seoul@data$location_cd <- substr(seoul@data$adm_cd2,1,8)
spdf_fortified <- tidy(seoul)
# 인구데이터 불러와서 합치기
final <- read.csv("final_data.csv")
korea <- fortify(seoul, region="location_cd")
date_ls <- final$date_ID
date_ls <- unique(date_ls)
buylrd2 <- c("#0061FF", "#0000FF", "#FFFFBF","#FFFFBF", "#FDAE61", "#FDAE61", "#F46D43", "#F46D43", "#F45543", "#D73027",  "#D73027", "#D72C27", "#D72C27", "#C71818", "#C70000","#C70000", "#A50026", "#B8002B", "#980026", "#980026","#980026", "#8F0026", "#8F0026")
sort_date <- list(final %>% filter(date_ID==date_ls[1]))
i <- 1
date_ls[1]
date_ls[50]
date_ls[100]
date_ls[150]
date_ls[200]
date_ls[250]
for (date in date_ls){
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
no_pop <- scale(sort_date[[i]]$final_pop)
mypalette <- colorNumeric(palette = buylrd2 , domain = sort_date[[i]]$final_pop)
# mypopup <- paste0(final$dong,'<br> 유동인구: ',sort_date[[i]]$final_pop)  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
map <- NULL
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
i=i+1
print(i)
Sys.sleep(3)
}
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[1]]$final_pop)) %>%
addLegend( value = ~sort_date[[1]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[5]]$final_pop)) %>%
addLegend( value = ~sort_date[[5]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[4]]$final_pop)) %>%
addLegend( value = ~sort_date[[4]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[4]]$final_pop)) %>%
addLegend( value = ~sort_date[[4]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[4]]$final_pop)) %>%
addLegend( value = ~sort_date[[4]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
library(ggplot2)
library(geojsonio)
library(broom)
library(dplyr)
library(leaflet)
library(RColorBrewer)
library(ggmap)
rm(list=ls())
# geojson 파일 불러오기
spdf <- geojson_read("dong.geojson",  what = "sp")
# 서울만 추려내기
spdf@data$seoul = substr( spdf@data$adm_nm, 1, 2)
seoul = spdf[ spdf@data$seoul == "서울" , ]
seoul@data$location_cd <- substr(seoul@data$adm_cd2,1,8)
spdf_fortified <- tidy(seoul)
# 인구데이터 불러와서 합치기
final <- read.csv("final_data.csv")
korea <- fortify(seoul, region="location_cd")
date_ls <- final$date_ID
date_ls <- unique(date_ls)
buylrd2 <- c("#0061FF", "#0000FF", "#FFFFBF","#FFFFBF", "#FDAE61", "#FDAE61", "#F46D43", "#F46D43", "#F45543", "#D73027",  "#D73027", "#D72C27", "#D72C27", "#C71818", "#C70000","#C70000", "#A50026", "#B8002B", "#980026", "#980026","#980026", "#8F0026", "#8F0026")
sort_date <- list(final %>% filter(date_ID==date_ls[1]))
i <- 1
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
no_pop <- scale(sort_date[[i]]$final_pop)
mypalette <- colorNumeric(palette = buylrd2 , domain = sort_date[[i]]$final_pop)
map <- NULL
####################개별 지도 띄울려면 아래 두개만 실행행
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
i=i+1
print(i)
Sys.sleep(3)
i=i+1
i=i+1
i=i+1
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
no_pop <- scale(sort_date[[i]]$final_pop)
mypalette <- colorNumeric(palette = buylrd2 , domain = sort_date[[i]]$final_pop)
map <- NULL
####################개별 지도 띄울려면 아래 두개만 실행행
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
library(ggplot2)
library(geojsonio)
library(broom)
library(dplyr)
library(leaflet)
library(RColorBrewer)
library(ggmap)
rm(list=ls())
# geojson 파일 불러오기
spdf <- geojson_read("dong.geojson",  what = "sp")
# 서울만 추려내기
spdf@data$seoul = substr( spdf@data$adm_nm, 1, 2)
seoul = spdf[ spdf@data$seoul == "서울" , ]
seoul@data$location_cd <- substr(seoul@data$adm_cd2,1,8)
spdf_fortified <- tidy(seoul)
# 인구데이터 불러와서 합치기
final <- read.csv("final_data.csv")
korea <- fortify(seoul, region="location_cd")
date_ls <- final$date_ID
date_ls <- unique(date_ls)
buylrd2 <- c("#0061FF", "#0000FF", "#FFFFBF","#FFFFBF", "#FDAE61", "#FDAE61", "#F46D43", "#F46D43", "#F45543", "#D73027",  "#D73027", "#D72C27", "#D72C27", "#C71818", "#C70000","#C70000", "#A50026", "#B8002B", "#980026", "#980026","#980026", "#8F0026", "#8F0026")
sort_date <- list(final %>% filter(date_ID==date_ls[1]))
i <- 1
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
no_pop <- scale(sort_date[[i]]$final_pop)
mypalette <- colorNumeric(palette = buylrd2 , domain = sort_date[[i]]$final_pop)
map <- NULL
####################개별 지도 띄울려면 아래 두개만 실행행
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
# popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
map
library(ggplot2)
library(geojsonio)
library(broom)
library(dplyr)
library(leaflet)
library(RColorBrewer)
library(ggmap)
library(mapview)
rm(list=ls())
# geojson 파일 불러오기
spdf <- geojson_read("dong.geojson",  what = "sp")
# 서울만 추려내기
spdf@data$seoul = substr( spdf@data$adm_nm, 1, 2)
seoul = spdf[ spdf@data$seoul == "서울" , ]
seoul@data$location_cd <- substr(seoul@data$adm_cd2,1,8)
tem <- seoul@data[order( seoul@data$OBJECTID),]
# 인구데이터 불러와서 합치기
final <- read.csv("final_data.csv")
date_ls <- final$date_ID
date_ls <- unique(date_ls)
date_ls <- date_ls[-2]
final_sum <- NULL
final_sub <- filter(final, date_ID==date)
final_sub$location_cd <- as.character(final_sub$location_cd)
final_sub <- filter(final, date_ID==date)
# 지도 데이터 순서에 맞춰서 데이터 변환
for (date in date_ls){
final_sub <- filter(final, date_ID==date)
final_sub$location_cd <- as.character(final_sub$location_cd)
tem$location_cd <- as.character(tem$location_cd)
final_total <- left_join(tem, final_sub,  by="location_cd")
final_total <- final_total[,c(6,8:10)]
final_sum <- bind_rows(final_sum, final_total)
}
final <- final_sum
buylrd2 <- c("#0061FF", "#0000FF", "#FFFFBF","#FFFFBF", "#FDAE61", "#FDAE61", "#F46D43", "#F46D43", "#F45543", "#D73027",  "#D73027", "#D72C27", "#D72C27", "#C71818", "#C70000","#C70000", "#A50026", "#B8002B", "#980026", "#980026","#980026", "#8F0026", "#8F0026")
sort_date <- list(final %>% filter(date_ID==date_ls[1]))
i <- 1
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
no_pop <- scale(sort_date[[i]]$final_pop)
mypalette <- colorNumeric(palette = buylrd2 , domain = sort_date[[i]]$final_pop)
mypopup <- paste0(final$dong,'<br> 유동인구: ',sort_date[[i]]$final_pop)  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
map <- NULL
####################개별 지도 띄울려면 아래 두개만 실행행
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
x=date
# mapshot(map, file =paste0("photo/",x,".png"))
map
#################### 개별지도는 여기까지 실행
print(i)
i <- 2
sort_date[i] <- list(final %>% filter( date_ID == date_ls[i]))
sort_date[[i]]$final_pop <- round(sort_date[[i]]$final_pop,-2)
no_pop <- scale(sort_date[[i]]$final_pop)
mypalette <- colorNumeric(palette = buylrd2 , domain = sort_date[[i]]$final_pop)
mypopup <- paste0(final$dong,'<br> 유동인구: ',sort_date[[i]]$final_pop)  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
map <- NULL
####################개별 지도 띄울려면 아래 두개만 실행행
map <- leaflet(seoul) %>%
addTiles() %>%
setView(lat=37.565 ,lng=127 , zoom=11) %>%
addPolygons(stroke =FALSE,
smoothFactor = 0.2,
fillOpacity = 1,
popup=mypopup,  # 지도 로딩하는 데 시간이 너무 오래 걸려서 필요시에 사용
color = ~mypalette(sort_date[[i]]$final_pop)) %>%
addLegend( value = ~sort_date[[i]]$final_pop,
pal = mypalette,
title = '유동인구',
opacity = 1)
x=date
# mapshot(map, file =paste0("photo/",x,".png"))
map
min(final$final_pop)
max(final$final_pop)
min(final$final_pop)
final$final_pop
# 인구데이터 불러와서 합치기
final <- read.csv("final_data.csv")
final$final_pop
final$final_pop
min(final$final_pop)
max(final$final_pop)
final$final_pop <- round(final$final_pop, 0)
final$final_pop
min(final$final_pop)
max(final$final_pop)
min(final$final_pop)
max(final$final_pop)
